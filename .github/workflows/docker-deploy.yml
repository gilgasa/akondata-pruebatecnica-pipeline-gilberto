name: Desplegar a Docker Hub y luego a Heroku

on:
  push:
    branches:
      - master  # Se activa con los cambios en la rama master

jobs:
  # Primer trabajo: Construir y desplegar la imagen a Docker Hub
  build-and-push-dockerhub:
    runs-on: ubuntu-latest  # Usa un entorno Ubuntu
    steps:
      - uses: actions/checkout@v2
        # Obtiene una copia del repositorio.

      - name: Configurar JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
        # Configura el entorno de Java.

      - name: Login a Docker Hub
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        # Autentica con Docker Hub para permitir la descarga de imágenes y evitar límites de tasa.

      - name: Construir y desplegar imagen Docker a Docker Hub
        run: mvn -Pdockerhub compile jib:build
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        # Construye la aplicación y despliega la imagen Docker a Docker Hub.

  # Segundo trabajo: Desplegar la aplicación en Heroku desde Docker Hub
  deploy-to-heroku:
    needs: build-and-push-dockerhub  # Este trabajo necesita completarse primero
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        # Vuelve a obtener una copia del repositorio para el despliegue a Heroku.

      - name: Login a Docker Hub
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        # Autentica con Docker Hub antes de hacer pull de la imagen.

      - name: Login a Heroku
        run: heroku container:login
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        # Autentica con Heroku Container Registry.

      - name: Desplegar a Heroku desde Docker Hub
        run: |
          docker pull docker.io/${{ secrets.DOCKERHUB_USERNAME }}/akondata-pruebatecnica-pipeline-gilberto:1.0-SNAPSHOT
          docker tag docker.io/${{ secrets.DOCKERHUB_USERNAME }}/akondata-pruebatecnica-pipeline-gilberto:1.0-SNAPSHOT registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web
          docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        # Descarga la imagen de Docker Hub, la etiqueta para Heroku y la sube al Container Registry de Heroku.

      - name: Release Docker container en Heroku
        run: heroku container:release web --app ${{ secrets.HEROKU_APP_NAME }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        # Libera el contenedor para que se ejecute en Heroku.
